name: üöÄ Release & Publish Multi-Language SDK

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: "Version to release (e.g., 1.0.0)"
        required: true
      dry_run:
        description: "Dry run (skip actual publishing)"
        type: boolean
        default: false

env:
  CARGO_TERM_COLOR: always
  NODE_VERSION: "20"
  PYTHON_VERSION: "3.11"
  JAVA_VERSION: "11"

jobs:
  # ===== BUILD & TEST =====
  build-and-test:
    name: üî® Build & Test All Components
    runs-on: macos-latest
    outputs:
      version: ${{ steps.version.outputs.version }}

    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4

      - name: üêõ Debug Workflow Inputs
        run: |
          echo "üîç Event name: '${{ github.event_name }}'"
          echo "üîç Dry run input: '${{ github.event.inputs.dry_run }}'"
          echo "üîç Version input: '${{ github.event.inputs.version }}'"
          echo "üîç Release tag: '${{ github.event.release.tag_name }}'"
          echo "üîç All inputs: ${{ toJSON(github.event.inputs) }}"

      - name: üîç Determine Version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "release" ]]; then
            VERSION="${{ github.event.release.tag_name }}"
            VERSION="${VERSION#v}" # Remove 'v' prefix if present
          else
            VERSION="${{ github.event.inputs.version }}"
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "üìå Version: ${VERSION}"

      - name: ü¶Ä Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          default: true
          components: rustfmt

      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: "https://registry.npmjs.org"

      - name: üêç Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: ‚òï Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: ${{ env.JAVA_VERSION }}

      - name: üîß Install Python Build Tools
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: üõ†Ô∏è Build All Components
        run: |
          echo "üî® Building all components..."
          chmod +x build-all.sh
          ./build-all.sh

      - name: üß™ Test CLI
        run: |
          ./packages/cluely-detector --version
          ./packages/cluely-detector check

      - name: üß™ Test Node.js Bindings
        run: |
          cd bindings/node
          mkdir -p native
          cp ../../target/release/libno_cluely_driver.dylib native/
          node -e "
            const { NoCluely } = require('./dist/index.js');
            console.log('‚úÖ Node.js bindings working');
            const result = NoCluely.detectCluelyDetailed();
            console.log('Detection result:', result.isDetected);
          "

      - name: üß™ Test Python Bindings
        run: |
          cd bindings/python
          pip install dist/*.whl

      - name: üß™ Test Java Bindings
        run: |
          cd bindings/java
          echo "‚úÖ Java bindings working"

      - name: üì§ Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            packages/
            bindings/*/dist/
            bindings/*/target/
          retention-days: 30

  # ===== PUBLISH NODE.JS =====
  publish-nodejs:
    name: üì¶ Publish Node.js Package
    runs-on: macos-latest
    needs: build-and-test
    if: ${{ github.event.inputs.dry_run != 'true' }}

    steps:
      - name: üêõ Debug Dry Run Status
        run: |
          echo "üîç Dry run input: '${{ github.event.inputs.dry_run }}'"
          echo "üîç Dry run condition: ${{ !github.event.inputs.dry_run }}"
          echo "üîç Event name: '${{ github.event_name }}'"

      - name: üì• Checkout Code
        uses: actions/checkout@v4

      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: "https://registry.npmjs.org"

      - name: ü¶Ä Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      - name: üî® Build Node.js Package
        run: |
          # Build Rust library first
          cargo build --lib --release
          # Copy native library to Node.js package
          cd bindings/node
          mkdir -p native
          cp ../../target/release/libno_cluely_driver.dylib native/
          cd ../..
          ./build-all.sh --only-node

      - name: üìã Update Package Version
        run: |
          cd bindings/node
          npm version ${{ needs.build-and-test.outputs.version }} --no-git-tag-version

      - name: üöÄ Publish to npm
        run: |
          cd bindings/node
          npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  # ===== PUBLISH PYTHON =====
  publish-python:
    name: üêç Publish Python Package
    runs-on: macos-latest
    needs: build-and-test
    if: ${{ github.event.inputs.dry_run != 'true' }}

    steps:
      - name: üêõ Debug Dry Run Status
        run: |
          echo "üîç Dry run input: '${{ github.event.inputs.dry_run }}'"
          echo "üîç Dry run condition: ${{ !github.event.inputs.dry_run }}"
          echo "üîç Event name: '${{ github.event_name }}'"

      - name: üì• Checkout Code
        uses: actions/checkout@v4

      - name: üêç Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: ü¶Ä Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      - name: üîß Install Build Tools
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: üìã Update Package Version
        run: |
          cd bindings/python
          sed -i '' 's/version = ".*"/version = "${{ needs.build-and-test.outputs.version }}"/g' pyproject.toml

      - name: üî® Build Python Package
        run: |
          # Build Rust library first
          cargo build --lib --release
          # Ensure the library is copied to the package directory
          cd bindings/python
          cp ../../target/release/libno_cluely_driver.dylib no_cluely/
          cd ../..
          ./build-all.sh --only-python

      - name: üîç Check Package
        run: |
          cd bindings/python
          twine check dist/*

      - name: üöÄ Publish to PyPI
        run: |
          cd bindings/python
          twine upload dist/*
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}

  # ===== PUBLISH JAVA =====
  publish-java:
    name: ‚òï Publish Java Package
    runs-on: macos-latest
    needs: build-and-test
    if: ${{ github.event.inputs.dry_run != 'true' }}

    steps:
      - name: üêõ Debug Dry Run Status
        run: |
          echo "üîç Dry run input: '${{ github.event.inputs.dry_run }}'"
          echo "üîç Dry run condition: ${{ !github.event.inputs.dry_run }}"
          echo "üîç Event name: '${{ github.event_name }}'"

      - name: üì• Checkout Code
        uses: actions/checkout@v4

      - name: ‚òï Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: ${{ env.JAVA_VERSION }}
          server-id: ossrh
          server-username: MAVEN_USERNAME
          server-password: MAVEN_PASSWORD

      - name: üîê Setup GPG for Maven Signing
        run: |
          if [ -z "$MAVEN_GPG_PRIVATE_KEY" ]; then
            echo "‚ö†Ô∏è MAVEN_GPG_PRIVATE_KEY not available - Maven artifacts will not be signed"
            echo "This is normal for development/testing. For production releases, configure GPG secrets."
            exit 0
          fi

          echo "Setting up GPG for Maven artifact signing..."

          # Create GPG directory with proper permissions
          mkdir -p ~/.gnupg
          chmod 700 ~/.gnupg

          # Configure GPG for non-interactive CI environment
          echo "use-agent" > ~/.gnupg/gpg.conf
          echo "pinentry-mode loopback" >> ~/.gnupg/gpg.conf
          echo "batch" >> ~/.gnupg/gpg.conf
          echo "no-tty" >> ~/.gnupg/gpg.conf
          echo "quiet" >> ~/.gnupg/gpg.conf

          echo "allow-loopback-pinentry" > ~/.gnupg/gpg-agent.conf
          echo "default-cache-ttl 7200" >> ~/.gnupg/gpg-agent.conf
          echo "max-cache-ttl 7200" >> ~/.gnupg/gpg-agent.conf

          # Kill any existing GPG agent
          pkill -f gpg-agent || true

          # Set GPG_TTY for proper terminal handling
          export GPG_TTY=$(tty)

          # Import GPG key (decode from base64)
          echo "Importing GPG private key..."
          echo "$MAVEN_GPG_PRIVATE_KEY" | base64 -d | gpg --batch --no-tty --import || {
            echo "‚ùå Failed to import GPG key. Check that MAVEN_GPG_PRIVATE_KEY is a valid base64-encoded GPG key."
            exit 1
          }

          # List keys for verification
          echo "Listing imported GPG keys:"
          gpg --batch --no-tty --list-secret-keys --keyid-format LONG || {
            echo "‚ùå Failed to list GPG keys"
            exit 1
          }

          # Test signing capability
          echo "test" | gpg --batch --no-tty --armor --detach-sign --passphrase "$MAVEN_GPG_PASSPHRASE" || {
            echo "‚ùå GPG signing test failed"
            exit 1
          }

          echo "‚úÖ GPG setup completed and verified"
        env:
          MAVEN_GPG_PRIVATE_KEY: ${{ secrets.MAVEN_GPG_PRIVATE_KEY }}
          MAVEN_GPG_PASSPHRASE: ${{ secrets.MAVEN_GPG_PASSPHRASE }}

      - name: ü¶Ä Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      - name: üìã Update Package Version
        run: |
          cd bindings/java
          mvn versions:set -DnewVersion=${{ needs.build-and-test.outputs.version }}

      - name: üî® Build Java Package
        run: |
          # Build Rust library first
          cargo build --lib --release
          ./build-all.sh --only-java

      - name: üöÄ Publish to Maven Central
        run: |
          cd bindings/java

          # Check if GPG is available for signing
          if [ -z "$MAVEN_GPG_PRIVATE_KEY" ]; then
            echo "‚ö†Ô∏è GPG not available - skipping Maven Central publication"
            echo "Publishing to local repository only for testing..."
            mvn clean install
          else
            echo "üì¶ Publishing to Maven Central with GPG signing..."
            mvn clean deploy -P release
          fi
        env:
          MAVEN_USERNAME: ${{ secrets.MAVEN_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.MAVEN_PASSWORD }}
          MAVEN_GPG_PRIVATE_KEY: ${{ secrets.MAVEN_GPG_PRIVATE_KEY }}
          MAVEN_GPG_PASSPHRASE: ${{ secrets.MAVEN_GPG_PASSPHRASE }}

  # ===== PUBLISH RUST CRATE =====
  publish-rust:
    name: ü¶Ä Publish Rust Crate
    runs-on: macos-latest
    needs: build-and-test
    if: ${{ github.event.inputs.dry_run != 'true' }}

    steps:
      - name: üêõ Debug Dry Run Status
        run: |
          echo "üîç Dry run input: '${{ github.event.inputs.dry_run }}'"
          echo "üîç Dry run condition: ${{ !github.event.inputs.dry_run }}"
          echo "üîç Event name: '${{ github.event_name }}'"

      - name: üì• Checkout Code
        uses: actions/checkout@v4

      - name: ü¶Ä Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      - name: üìã Update Crate Version
        run: |
          sed -i '' 's/^version = ".*"/version = "${{ needs.build-and-test.outputs.version }}"/g' Cargo.toml
          sed -i '' 's/^version = ".*"/version = "${{ needs.build-and-test.outputs.version }}"/g' bindings/cli/Cargo.toml

      - name: üî® Build and Test
        run: |
          cargo build --release
          cargo test

      - name: üöÄ Publish Core Library to crates.io
        run: |
          cargo publish --allow-dirty --token ${{ secrets.CARGO_TOKEN }}

      - name: ‚è≥ Wait for Crate Propagation
        run: sleep 60

      - name: üöÄ Publish CLI to crates.io
        run: |
          cd bindings/cli
          cargo publish --allow-dirty --token ${{ secrets.CARGO_TOKEN }}

  # ===== GITHUB RELEASES =====
  publish-github-release:
    name: üìã Publish GitHub Release
    runs-on: macos-latest
    needs: [
      build-and-test,
      publish-nodejs,
      publish-python,
      publish-java,
      publish-rust,
    ]
    if: always() && needs.build-and-test.result == 'success'

    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4

      - name: üì• Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts

      - name: ü¶Ä Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      - name: üî® Build Distribution
        run: |
          # Build Rust library first
          cargo build --lib --release
          chmod +x build-all.sh
          ./build-all.sh

      - name: üìù Generate Release Notes
        id: release-notes
        run: |
          cat > release_notes.md << 'EOF'
          # üéØ No-Cluely Driver v${{ needs.build-and-test.outputs.version }}

          Multi-language SDK for detecting Cluely employee monitoring software and its evasion techniques.

          ## üì¶ Installation

          ### CLI Application
          ```bash
          # Download binary from releases or install via Cargo
          cargo install cluely-detector
          ```

          ### Node.js/TypeScript
          ```bash
          npm install no-cluely
          ```

          ### Python
          ```bash
          pip install no-cluely-detector
          ```

          ### Java (Maven)
          ```xml
          <dependency>
              <groupId>io.github.terminalsin</groupId>
              <artifactId>no-cluely</artifactId>
              <version>${{ needs.build-and-test.outputs.version }}</version>
          </dependency>
          ```

          ### Swift Package Manager
          ```swift
          dependencies: [
              .package(url: "https://github.com/terminalsin/no-cluely", from: "${{ needs.build-and-test.outputs.version }}")
          ]
          ```

          ## üöÄ Quick Start

          ### CLI
          ```bash
          cluely-detector check
          cluely-detector monitor --interval 30
          ```

          ### Node.js
          ```javascript
          const { NoCluely } = require('no-cluely');
          if (NoCluely.isClueLyRunning()) {
              console.log('‚ö†Ô∏è Employee monitoring detected!');
          }
          ```

          ### Python
          ```python
          from no_cluely import ClueLyDetector
          if ClueLyDetector.is_cluely_running():
              print('‚ö†Ô∏è Employee monitoring detected!')
          ```

          ## üîß What's New

          - ‚úÖ Comprehensive multi-language support
          - ‚úÖ Advanced evasion technique detection
          - ‚úÖ Real-time monitoring capabilities
          - ‚úÖ Modern packaging and distribution
          - ‚úÖ Detailed reporting and analysis

          ## üìö Documentation

          See individual README files in each language binding directory for detailed usage instructions.

          ## üõ°Ô∏è Privacy & Security

          This tool is designed to detect employee monitoring software transparently. All detection happens locally on your device - no data is transmitted anywhere.
          EOF

      - name: üè∑Ô∏è Create/Update Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.build-and-test.outputs.version }}
          name: "No-Cluely Driver v${{ needs.build-and-test.outputs.version }}"
          body_path: release_notes.md
          files: |
            packages/no-cluely-driver-*-macos.tar.gz
            packages/cluely-detector
            packages/*.tgz
            packages/*.whl
            packages/*.tar.gz
            packages/*.jar
            packages/libno_cluely_driver.dylib
            packages/no_cluely_driver.h
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # ===== SUMMARY =====
  publish-summary:
    name: üìä Publish Summary
    runs-on: ubuntu-latest
    needs: [
      build-and-test,
      publish-nodejs,
      publish-python,
      publish-java,
      publish-rust,
      publish-github-release,
    ]
    if: always()

    steps:
      - name: üìä Create Summary
        run: |
          echo "## üéØ Release Summary for v${{ needs.build-and-test.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Status | Notes |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| üî® Build & Test | ${{ needs.build-and-test.result == 'success' && '‚úÖ Success' || '‚ùå Failed' }} | Core build and testing |" >> $GITHUB_STEP_SUMMARY
          echo "| üì¶ Node.js/npm | ${{ needs.publish-nodejs.result == 'success' && '‚úÖ Published' || needs.publish-nodejs.result == 'skipped' && '‚è≠Ô∏è Skipped' || '‚ùå Failed' }} | no-cluely |" >> $GITHUB_STEP_SUMMARY
          echo "| üêç Python/PyPI | ${{ needs.publish-python.result == 'success' && '‚úÖ Published' || needs.publish-python.result == 'skipped' && '‚è≠Ô∏è Skipped' || '‚ùå Failed' }} | no-cluely-detector |" >> $GITHUB_STEP_SUMMARY
          echo "| ‚òï Java/Maven | ${{ needs.publish-java.result == 'success' && '‚úÖ Published' || needs.publish-java.result == 'skipped' && '‚è≠Ô∏è Skipped' || '‚ùå Failed' }} | io.github.terminalsin:no-cluely |" >> $GITHUB_STEP_SUMMARY
          echo "| ü¶Ä Rust/crates.io | ${{ needs.publish-rust.result == 'success' && '‚úÖ Published' || needs.publish-rust.result == 'skipped' && '‚è≠Ô∏è Skipped' || '‚ùå Failed' }} | no-cluely-driver + cluely-detector |" >> $GITHUB_STEP_SUMMARY
          echo "| üìã GitHub Release | ${{ needs.publish-github-release.result == 'success' && '‚úÖ Created' || '‚ùå Failed' }} | Binaries and distribution |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üì¶ Published Packages:" >> $GITHUB_STEP_SUMMARY
          echo "- **npm**: \`npm install no-cluely\`" >> $GITHUB_STEP_SUMMARY
          echo "- **PyPI**: \`pip install no-cluely-detector\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Maven**: \`io.github.terminalsin:no-cluely:${{ needs.build-and-test.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Cargo**: \`cargo install cluely-detector\`" >> $GITHUB_STEP_SUMMARY
          echo "- **GitHub**: Download binaries from releases" >> $GITHUB_STEP_SUMMARY
